App = {
    loading: false,
    contracts: {},

    load: async() => {
        await App.loadWeb3()
        await App.loadAccount()
        await App.loadContract()
        await App.render()
    },

    // https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8
    loadWeb3: async() => {
        if (typeof web3 !== 'undefined') {
            App.web3Provider = web3.currentProvider
            web3 = new Web3(web3.currentProvider)
        } else {
            window.alert("Please connect to Metamask.")
        }
        // Modern dapp browsers...
        if (window.ethereum) {
            window.web3 = new Web3(ethereum)
            try {
                // Request account access if needed
                await ethereum.enable()
                    // Acccounts now exposed
                web3.eth.sendTransaction({ /* ... */ })
            } catch (error) {
                // User denied account access...
            }
        }
        // Legacy dapp browsers...
        else if (window.web3) {
            App.web3Provider = web3.currentProvider
            window.web3 = new Web3(web3.currentProvider)
                // Acccounts always exposed
            web3.eth.sendTransaction({ /* ... */ })
        }
        // Non-dapp browsers...
        else {
            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!')
        }
    },

    loadAccount: async() => {
        // Set the current blockchain account
        App.account = web3.eth.accounts[0]
    },

    loadContract: async() => {
        // Create a JavaScript version of the smart contract
        const MainFactory = await $.getJSON('MainFactory.json')
        const ContractFactory = await $.getJSON('ContractFactory.json')
        const ContractInstance = await $.getJSON('ContractInstance.json')

        App.contracts.MainFactory = TruffleContract(MainFactory)
        App.contracts.MainFactory.setProvider(App.web3Provider)

        App.contracts.ContractFactory = TruffleContract(ContractFactory)
        App.contracts.ContractFactory.setProvider(App.web3Provider)

        App.contracts.ContractInstance = TruffleContract(ContractInstance)
        App.contracts.ContractInstance.setProvider(App.web3Provider)

        // Hydrate the smart contract with values from the blockchain
        App.MainFactory = await App.contracts.MainFactory.deployed()
        App.ContractFactory = await App.contracts.ContractFactory.deployed()
        App.ContractInstance = await App.contracts.ContractInstance.deployed()
    },
    useAddress: async(contractName, address) => {
        var contractABI = web3.eth.contract(App.ContractFactory.abi)
        var contract = contractABI.at(address);
        return contract;
    },

    render: async() => {
        // Prevent double render
        if (App.loading) {
            return
        }

        // Update app loading state
        App.setLoading(true)

        // Render Account
        $('#account').html(App.account)

        // Render Tasks
        await App.renderTasks()

        // Update loading state
        App.setLoading(false)
    },

    renderTasks: async() => {
        // Load the total task count from the blockchain
        //const taskCount = await App.ContractFactory.taskCount()
        //const $taskTemplate = $('.taskTemplate')
        var createFactory = await App.MainFactory.createMainContract()
        console.log(createFactory.logs[0].args.factoryAddress)
        var contractABI = web3.eth.contract(App.ContractFactory.abi)
        var contract = contractABI.at(createFactory.logs[0].args.factoryAddress);

        /*  var createContractFactory = await contract.createContract()
         console.log(createContractFactory) */

        contract.createContract(function(error, result) {
            if (!error) {
                console.log("aaa" + result);
            } else
                console.error(error);
        });

    },

    createTask: async() => {
        App.setLoading(true)
        const content = $('#newTask').val()
        await App.ContractFactory.createTask(content)
        window.location.reload()
    },

    toggleCompleted: async(e) => {
        App.setLoading(true)
        const taskId = e.target.name
        await App.ContractFactory.toggleCompleted(taskId)
        window.location.reload()
    },

    setLoading: (boolean) => {
        App.loading = boolean
        const loader = $('#loader')
        const content = $('#content')
        if (boolean) {
            loader.show()
            content.hide()
        } else {
            loader.hide()
            content.show()
        }
    }
}

$(() => {
    $(window).load(() => {
        App.load()
    })
})
